# This workflow will do a clean build of the proto files and push the packages to github package server
# Currently it builds:
# - javascript
# - java
# - go
# - c#
#
# But it only publishes c# and go, as those are the only two we use at the moment

name: protorepo CI

on:
  push:
    tags:
      - 'v*'
    paths-ignore:
      - "README.md"
      - "built"
      - "docs/**"
      - "**.md"
      - "**.MD"

env:
  DOTNET_BUILD_CONFIG: "Release"
  GO111MODULE: "on"
  BASE_VERSION: "0.2.0"

jobs:
  # Lint
  lint:
    name: buf lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.4.0
      - uses: ory/build-buf-action@v0.0.10
        with:
          bufVersion: v1.6.0
          bufArgs: lint --config buf.yaml

  build-csharp:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      #
      # Enironment Setup
      #
      - name: Pull Source
        uses: actions/checkout@v2.4.0

      - name: GET CURRENT BRANCH NAME
        id: get-branch
        uses: ypicard/get-branch-name-github-action@v1

      - name: Echo outputs
        run: echo "name=${{ steps.get-branch.outputs.branch }} - tag=${{ steps.get-branch.outputs.tag }}"

      - name: Setting Up dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "3.1.x" # x will use the latest version of the 3.1 channel
          source-url: https://nuget.pkg.github.com/mapped/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Setting Up protoc
        uses: arduino/setup-protoc@v1
        with:
          version: "3.x"

      - name: Establish Versioning, Tags, and Labels
        id: vtl
        uses: mapped/action-vtl@v0.2.7
        with:
          baseVersion: ${{ env.BASE_VERSION }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      #
      # Transpiling protobufs
      #

      # To ensure we catch deletions, we start fresh
      - name: Cleaning up built/
        run: rm -rf ./built

      #
      # C# Package
      #
      - name: C# - Restoring NuGet Packages
        run: dotnet restore
        working-directory: ./packages/csharp/Mapped.PB

      - name: C# - Building .NET Standard Library
        run: |
          dotnet build --configuration $DOTNET_BUILD_CONFIG -p:AssemblyVersion=$VERTUPLE -p:FileVersion=$VERTUPLE -p:RepositoryUrl=https://github.com/${{ github.repository }} -p:RepositoryType=git -p:RepositoryBranch=${{ github.ref }} -p:RepositoryCommit=${{ github.sha }}
        working-directory: ./packages/csharp/Mapped.PB
        env:
          VERTUPLE: ${{ steps.vtl.outputs.ver_semVerFourTupleNumeric }}

      - name: C# - Packing .NET Standard NuGet Package
        run: dotnet pack --configuration $DOTNET_BUILD_CONFIG --no-build --include-source --include-symbols --version-suffix ${{ steps.vtl.outputs.ver_buildNumber }} -p:Version=$VERTUPLE -p:RepositoryUrl=https://github.com/${{ github.repository }} -p:RepositoryType=git -p:RepositoryBranch=${{ github.ref }} -p:RepositoryCommit=${{ github.sha }}
        working-directory: ./packages/csharp/Mapped.PB
        env:
          VERTUPLE: ${{ steps.vtl.outputs.ver_semVerFourTupleNumeric }}

      - name: C# - Publish Package
        run: dotnet nuget push **/*.nupkg --skip-duplicate
        working-directory: ./packages/csharp/Mapped.PB
        env:
          # see https://github.community/t/github-package-registry-not-compatible-with-dotnet-nuget-client/14392/11
          # and https://github.com/NuGet/Home/issues/2627
          # and https://github.com/actions/setup-dotnet/issues/101
          DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER: 0

  build-go:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      #
      # Enironment Setup
      #
      - name: Pull Source
        uses: actions/checkout@v2.4.0

      - name: GET CURRENT BRANCH NAME
        id: get-branch
        uses: ypicard/get-branch-name-github-action@v1

      - name: Echo outputs
        run: echo "name=${{ steps.get-branch.outputs.branch }} - tag=${{ steps.get-branch.outputs.tag }}"

      - name: Setting Up go
        uses: actions/setup-go@v2
        with:
          go-version: "^1.19"

      - name: Setting Up protoc
        uses: arduino/setup-protoc@v1
        with:
          version: "3.x"

      - name: Establish Versioning, Tags, and Labels
        id: vtl
        uses: mapped/action-vtl@v0.2.7
        with:
          baseVersion: ${{ env.BASE_VERSION }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - uses: shaunco/ssh-agent@git-repo-mapping
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PB_GO_WRITE }}
          repo-mappings: |
            github.com/mapped/pb-go

      #
      # Transpiling protobufs
      #

      # To ensure we catch deletions, we start fresh
      - name: Cleaning up built/
        run: rm -rf ./built

      # Transpile Go
      - name: Transpile .proto files
        uses: ory/build-buf-action@v0.0.10
        with:
          bufVersion: v1.6.0
          protocPlugins: go@v1.27.1 go-grpc@v1.2.0
          bufArgs: generate --config buf.yaml --template buf.gen.go.yaml

      #
      # Go
      #
      - name: Go - Publishing pb-go (for main branch)
        run: |
          set -x

          # Clone pb-go
          git clone git@github.com:mapped/pb-go.git

          # Move the generated files from stage to pb-go
          STAGE_DIR="staged/go.mapped.dev/pb"
          mv pb-go/README.md ${STAGE_DIR}
          rm -rf pb-go/*
          mv ${STAGE_DIR}/* pb-go
          cd pb-go

          # Add go.mod files
          for D in *; do [ -d "${D}" ] && echo "module go.mapped.dev/pb/${D}" > "${D}/go.mod"; done

          # cloud package uses cloudevents/sdk-go
          CLOUD_GO_MOD="cloud/go.mod"
          echo "" >> ${CLOUD_GO_MOD}
          echo "require github.com/cloudevents/sdk-go/v2 v2.3.1" >> ${CLOUD_GO_MOD}

          # Push to pb-go
          git config --global user.email "buildpipeline@mapped.com"
          git config --global user.name "Mapped Build Pipeline"
          git add -A --force .
          git commit --allow-empty -m "Pipeline build $VERTUPLE"
          git push --force
          git tag -a "v$VERTUPLE" -m "Pipeline build $VERTUPLE"
          git tag -a "cloud/v$VERTUPLE" -m "Pipeline build $VERTUPLE (cloud package)"
          git tag -a "connectors/v$VERTUPLE" -m "Pipeline build $VERTUPLE (connectors package)"
          git tag -a "gateway/v$VERTUPLE" -m "Pipeline build $VERTUPLE (gateway package)"
          git tag -a "events/v$VERTUPLE" -m "Pipeline build $VERTUPLE (events package)"
          git tag -a "ontology/v$VERTUPLE" -m "Pipeline build $VERTUPLE (ontology package)"
          git push origin --tags
        working-directory: packages/go
        env:
          VERTUPLE: ${{ steps.vtl.outputs.ver_semVerNoMeta }}

  build-java:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      #
      # Enironment Setup
      #
      - name: Pull Source
        uses: actions/checkout@v2.4.0

      - name: GET CURRENT BRANCH NAME
        id: get-branch
        uses: ypicard/get-branch-name-github-action@v1

      - name: Echo outputs
        run: echo "name=${{ steps.get-branch.outputs.branch }} - tag=${{ steps.get-branch.outputs.tag }}"

      - name: Setting Up protoc
        uses: arduino/setup-protoc@v1
        with:
          version: "3.x"

      - name: Establish Versioning, Tags, and Labels
        id: vtl
        uses: mapped/action-vtl@v0.2.7
        with:
          baseVersion: ${{ env.BASE_VERSION }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      #
      # Transpiling protobufs
      #

      # To ensure we catch deletions, we start fresh
      - name: Cleaning up built/
        run: rm -rf ./built

      # Transpile Java
      - name: Transpile .proto files
        uses: ory/build-buf-action@v0.0.10
        with:
          bufVersion: v1.6.0
          protocPlugins: grpc-java@1.43.2
          bufArgs: generate --config buf.yaml --template buf.gen.java.yaml

      #
      # Java Package
      #
      - name: Java - Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }}/packages/java # location for the settings.xml file

      - name: Java - Set up version in pom
        run: sed -i "s/\${PROTOREPO_VERSION}/${{ steps.vtl.outputs.ver_semVerFourTupleNumeric }}/g" pom.xml
        working-directory: packages/java

      - name: Java - Build with Maven
        run: mvn -Drevision=${{ steps.vtl.outputs.ver_semVerFourTupleNumeric }} -B package --file pom.xml
        working-directory: packages/java

      - name: Java - Publish to GitHub Packages
        if: ${{ github.ref == 'refs/heads/main' }} # Remove after https://app.clickup.com/t/1qe8yda is fixed
        run: mvn -Drevision=${{ steps.vtl.outputs.ver_semVerFourTupleNumeric }} deploy -s settings.xml
        working-directory: packages/java
        env:
          GITHUB_TOKEN: ${{ github.token }}

  build-python:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      #
      # Enironment Setup
      #
      - name: Pull Source
        uses: actions/checkout@v2.4.0

      - name: GET CURRENT BRANCH NAME
        id: get-branch
        uses: ypicard/get-branch-name-github-action@v1

      - name: Echo outputs
        run: echo "name=${{ steps.get-branch.outputs.branch }} - tag=${{ steps.get-branch.outputs.tag }}"

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Setting Up protoc
        uses: arduino/setup-protoc@v1
        with:
          version: "3.x"

      - name: Establish Versioning, Tags, and Labels
        id: vtl
        uses: mapped/action-vtl@v0.2.7
        with:
          baseVersion: ${{ env.BASE_VERSION }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      #
      # Transpiling protobufs
      #

      - name: Custom Protoc Plugins
        run: |
          # better-proto's [compiler] dependencies. Check https://github.com/danielgtaylor/python-betterproto/blob/bfc0fac7544bbdf4e0e2beabd45482a4958af514/pyproject.toml#L46
          pip install black jinja2 protobuf isort betterproto[compiler]==2.0.0b5
          export PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python

      # To ensure we catch deletions, we start fresh
      - name: Cleaning up built/
        run: rm -rf ./built

      # Transpile Python
      - name: Transpile .proto files
        uses: ory/build-buf-action@v0.0.10
        with:
          bufVersion: v1.6.0
          bufArgs: generate --config buf.yaml --template buf.gen.python.yaml

      #
      # Python Package
      #
      - name: Prep Poetry
        uses: abatilo/actions-poetry@v2.1.5
        with:
          poetry-version: "1.1.14"

      - name: Remove gitignore
        run: |
          rm .gitignore packages/python/.gitignore

      - name: Rename mapped to mapped_pb
        run: |
          mv packages/python/mapped packages/python/mapped_pb

      - name: Python - Publish Package
        run: |
          poetry version "${{ steps.vtl.outputs.ver_semVerNoMeta}}"
          poetry publish --build -vvv -u __token__ -p ${{ secrets.PYPI_PB_UPLOAD }}
        working-directory: packages/python

  build-typescript:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      #
      # Enironment Setup
      #
      - name: Pull Source
        uses: actions/checkout@v2.4.0

      - name: GET CURRENT BRANCH NAME
        id: get-branch
        uses: ypicard/get-branch-name-github-action@v1

      - name: Echo outputs
        run: echo "name=${{ steps.get-branch.outputs.branch }} - tag=${{ steps.get-branch.outputs.tag }}"

      - name: Use Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          registry-url: https://npm.pkg.github.com/

      - name: Setting Up protoc
        uses: arduino/setup-protoc@v1
        with:
          version: "3.x"

      - name: Establish Versioning, Tags, and Labels
        id: vtl
        uses: mapped/action-vtl@v0.2.7
        with:
          baseVersion: ${{ env.BASE_VERSION }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      #
      # Transpiling protobufs
      #

      # To ensure we catch deletions, we start fresh
      - name: Cleaning up built/
        run: rm -rf ./built

      # Transpile Typescript
      - name: Transpile .proto files
        uses: ory/build-buf-action@v0.0.10
        with:
          bufVersion: v1.6.0
          protocPlugins: ts-proto@1.103.0
          bufArgs: generate --config buf.yaml --template buf.gen.typescript.yaml

      #
      # TypeScript For NodeJS
      #
      - name: TS-Node - Install Packages
        run: npm install --ignore-scripts
        working-directory: ./packages/ts-node

      - name: TS-Node - Update Package Version
        run: npm version v${{ steps.vtl.outputs.ver_semVerNoMeta }} --allow-same-version
        working-directory: ./packages/ts-node

      - name: Compile TS -> JS files
        run: |
          tsc -p tsconfig.json
        working-directory: ./packages/ts-node

      - name: Copy TS into the /dist folder (GAMBIARRA)
        run: |
          ls -lh
          cp -R ./src/. ./.
        working-directory: ./packages/ts-node

      - name: TS-Node - Publishing Package
        run: npm publish --access restricted
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
          NODE_OPTIONS: --max_old_space_size=4096
        working-directory: ./packages/ts-node

      #
      # TypeScript For Browsers
      #
      - name: TS-Browser - Install Packages
        run: npm install --ignore-scripts
        working-directory: ./packages/ts-browser

      - name: TS-Browser - Update Package Version
        run: npm version v${{ steps.vtl.outputs.ver_semVerNoMeta }} --allow-same-version
        working-directory: ./packages/ts-browser

      - name: Compile TS -> JS files
        run: |
          tsc -p tsconfig.json
        working-directory: ./packages/ts-browser

      - name: Copy TS into the /dist folder (GAMBIARRA)
        run: |
          ls -lh
          cp -R ./src/. ./dist/.
        working-directory: ./packages/ts-browser

      - name: TS-Browser - Publishing Package
        run: npm publish --access restricted
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
          NODE_OPTIONS: --max_old_space_size=4096
        working-directory: ./packages/ts-browser
