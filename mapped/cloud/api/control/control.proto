// ******************************************************************************************************
// Copyright 2022 Mapped Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ******************************************************************************************************
syntax = "proto3";

package mapped.cloud.api.control;

option java_multiple_files = true;
option java_package = "com.mapped.cloud.api.control";
option csharp_namespace = "Mapped.Cloud.Api.Control";
option go_package = "go.mapped.dev/pb/cloud/api/control;control";
option (graphql_prefix) = "Control";

import "mapped/common.proto";
import "mapped/cloud/types/typed_value.proto";
import "mapped/cloud/types/control.proto";


message WritePropRequest {
    // The property value(s) to write
    PointReferenceAndValue payload = 1;


    // Simulate the command by only validating the input and logging
    // do not send an actual command over the wire
    bool simulate = 100;
}

message WritePropResponse {
    // The unique ID of this request to be provided to Mapped Support
    // for troubleshooting in the case of unexpected errors
    string request_id = 1;

    // The result of each property write
    PointReferenceAndResult payload = 2;
}

message PointReferenceAndValue {
    // The `point.id` or `point.mappingKey` where the value originated from or is to be written to
    string point_reference_id = 1;

    // The value read or to be written 
    // NOTE: The value *type* must NOT change type between a read and a write
    mapped.cloud.types.TypedValue value = 2;
}

message PointReferenceAndResult {
    // The `point.id` or `point.mappingKey` provided to the write request
    string point_reference_id = 1;

    // The result code
    mapped.cloud.types.ControlResult result = 2;

    // Error description (if available)
    string error_description = 3;

    // Protocol-specific error class, for protocols that split class/code - like BACnet
    int64 connector_error_class = 4;

    // Protocol-specific error code
    int64 connector_error_code = 5;
}

